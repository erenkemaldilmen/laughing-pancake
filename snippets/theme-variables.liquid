{% comment %} <link rel="preload" as="style" href="{{ 'flickity.css' | asset_url }}">
<link rel="preload" as="style" href="{{ 'header.css' | asset_url }}">
<link rel="preload" as="style" href="{{ 'base.css' | asset_url }}">
<link rel="preload" as="style" href="{{ 'style.css' | asset_url }}">
<link rel="preload" as="style" href="{{ 'aos.css' | asset_url }}"> {% endcomment %}

{{ 'flickity.css' | asset_url | preload_tag: as: 'style' }}
{% if template.name != "index" %}
{% unless request.path contains "/publisher/" or request.path contains "/developer/"  %}

{{ 'flickity.css' | asset_url | preload_tag: as: 'style' }}
  {% endunless %}
    {% endif %}
{{ 'header.css' | asset_url | preload_tag: as: 'style' }}
{{ 'base.css' | asset_url | preload_tag: as: 'style' }}
{{ 'style.css' | asset_url | preload_tag: as: 'style' }}
{{ 'flickity.css' | asset_url | stylesheet_tag }}
{% if template.name != "index" %}
{% unless request.path contains "/publisher/" or request.path contains "/developer/"  %}

{{ 'flickity.css' | asset_url | stylesheet_tag }}
  
{% endunless %}
{% endif %}

{{ 'header.css' | asset_url | stylesheet_tag }}
{{ 'base.css' | asset_url | stylesheet_tag }}
{{ 'style.css' | asset_url | stylesheet_tag }}

{% comment %} {{ 'aos.css' | asset_url | stylesheet_tag }} {% endcomment %}

{% if settings.enable_animation %}
  {{ 'aos.css' | asset_url | preload_tag: as: 'style' }}
  {{ 'aos.css' | asset_url | stylesheet_tag }}
{% endif %}



<script>
  const bdageAnimationSeconds= {{settings.animation_range }};
  const aosAnimation = {{ settings.enable_animation }};
  const carType = '{{ settings.Cart_type }}';
  const googleMapApiKey = '{{ settings.googlemapapi }}';
  const googleMapId = '{{ settings.googlemapid }}';
  
  const preorderStatus =  {{ settings.enable_preorder | default: false }};
  const moneyFormat = "{{ shop.money_format | replace:'"',"" }}";
  const moneyFormatWithoutCurrency = "{{ shop.money_format | replace:'"',""| remove: cart.currency.symbol | replace: 'amount_with_comma_separator', 'amount' }}";
  const cartUrl = '{{ routes.cart_url }}.js';
  const mainSearchUrl = '{{ routes.search_url }}';
  const mainCartUrl = '{{ routes.cart_url }}';
  const cartAdd = '{{ routes.cart_add_url }}';
  const cartAddUrl = '{{ routes.cart_add_url }}.js';
  const cartUpdateUrl = '{{ routes.cart_update_url }}.js';
  const cartChangeUrl = '{{ routes.cart_change_url }}.js';
  const availableATCText = '{{ 'products.product.add_to_cart' | t }}';  
  const unavailableATCText = '{{ 'products.product.unavailable' | t }}'; 
  const soldoutATCText = '{{ 'products.product.sold_out' | t }}'; 
  const preorderATCText = '{{ 'products.product.preorder' | t }}'; 
  const hapticFeedbackStatus = {{ settings.haptic_feedback }};
  const shakeEffect = {{ settings.shake_effect }};
  {% liquid
    assign searchType = 'product,collection,query'
    if settings.show_article or settings.show_pages
      if settings.show_article
        assign searchType = searchType | append: ',article'
      endif
      if settings.show_pages
        assign searchType = searchType | append: ',page'
      endif
    endif 
  %}
  const predictiveSearchTypes = '{{ searchType }}';
  const preLoadLoadGif = `<div class="loader text-center">
    <svg width="50px" height="50px" viewBox="0 0 100 100" >
      <circle cx="50" cy="50" fill="none" stroke="currentColor" stroke-width="6" r="35" stroke-dasharray="164.93361431346415 56.97787143782138">
        <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" values="0 50 50;360 50 50" keyTimes="0;1"/>
      </circle>
    </svg>
  </div>`;


  //Tab attention
{% if settings.show_attention_message and settings.message_1 != blank or settings.message_2 != blank %}
      document.addEventListener('DOMContentLoaded', function () {
      var message1 = "{{- settings.message_1 -}}";
      var message2 = "{{- settings.message_2 -}}";
      var messageDelay = {{- settings.message_delay -}} * 1000;
      var original = document.title;
      var tabMessage = '';
      var tabMessageSeq = 1;
      window.onblur = function () {
        setTimeout(function(){
          tabMessage = setInterval(function(){
            if(tabMessageSeq == 1){
              document.title = message1;
              if(message2 != ''){
                tabMessageSeq = 2;
              }
            }
            else{
              document.title = message2;
              tabMessageSeq = 1;
            }
          },messageDelay);
        },messageDelay);
      };
      window.onfocus = function () {
        clearInterval(tabMessage);
        document.title = original;
      };
    });
{% endif %}
var Shopify = Shopify || {};
// ---------------------------------------------------------------------------
// Money format handler
// ---------------------------------------------------------------------------
Shopify.money_format = "${{amount}}";
Shopify.formatMoney = function (cents, format) {
  if (typeof cents == "string") {
    cents = cents.replace(".", "");
  }
  var value = "";
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = format || this.money_format;

  function defaultOption(opt, def) {
    return typeof opt == "undefined" ? def : opt;
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ",");
    decimal = defaultOption(decimal, ".");

    if (isNaN(number) || number == null) {
      return 0;
    }

    number = (number / 100.0).toFixed(precision);

    var parts = number.split("."),
      dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1" + thousands),
      cents = parts[1] ? decimal + parts[1] : "";

    return dollars + cents;
  }

  switch (formatString.match(placeholderRegex)[1]) {
    case "amount":
      value = formatWithDelimiters(cents, 2);
      break;
    case "amount_no_decimals":
      value = formatWithDelimiters(cents, 0);
      break;
    case "amount_with_comma_separator":
      value = formatWithDelimiters(cents, 2, ".", ",");
      break;
    case "amount_no_decimals_with_comma_separator":
      value = formatWithDelimiters(cents, 0, ".", ",");
      break;
  }

  return formatString.replace(placeholderRegex, value);
};
</script>
{% if template contains 'product' %}
  <link rel="stylesheet" href="https://cdn.shopify.com/shopifycloud/model-viewer-ui/assets/v1.0/model-viewer-ui.css">
{% endif %}
<script type="text/javascript" src="{{ 'jquery.min.js' | asset_url }}" defer="defer"></script>
<script type="text/javascript" src="{{ 'lazysizes.min.js' | asset_url }}" defer></script>
{% if settings.enable_animation %}
<script type="text/javascript" src="{{ 'aos.js' | asset_url }}" defer></script>
{% endif %}<script type="text/javascript" src="{{ 'flickity.js' | asset_url }}" defer="defer"></script>

{% if template.name != "index" %}
{% unless request.path contains "/publisher/" or request.path contains "/developer/"  %}
<script type="text/javascript" src="{{ 'flickity.js' | asset_url }}" defer="defer"></script>
{% endunless %}
{% endif %}
<script type="text/javascript" src="{{ 'theme.js' | asset_url }}" defer="defer"></script>
{% if request.design_mode %}
<script type="text/javascript" src="{{ 'theme-editor.js' | asset_url }}" defer="defer"></script>
{% endif %}
<script type="text/javascript" src="{{ 'player.js' | asset_url }}" defer></script>
<script src="{{ 'parallax.js' | asset_url }}" defer></script>
<!-- JS -->
{% if template contains 'product' or template contains 'collection' %}
  <script type="text/javascript" src="{{ 'product.js' | asset_url }}" defer="defer"></script>
{% endif %}
<script type="text/javascript" src="{{ 'cart.js' | asset_url }}" defer="defer"></script>
